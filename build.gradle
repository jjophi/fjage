apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

defaultTasks 'jars'

archivesBaseName = 'fjage'
group = 'com.github.org-arl'
version = new File(projectDir, 'VERSION').text.trim()

// get git commit
def stdout = new ByteArrayOutputStream()
exec {
  commandLine 'git', 'describe', '--always', '--abbrev=8', '--match', 'NOT A TAG', '--dirty=*'
  standardOutput = stdout;
}
def commit = "$stdout".replace('\n','')

boolean npmExists = false
try {
  def npmproc = "npm -v".execute()
  npmproc.waitForOrKill(3000)
  npmExists = npmproc.exitValue() == 0
}catch (IOException ex){}

boolean isCI = System.getenv('CI') != null

targetCompatibility = 1.8
sourceCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.codehaus.groovy:groovy:2.5.9'
  compile 'org.jline:jline:3.12.1'
  compile 'org.apache.commons:commons-lang3:3.9'
  compile 'commons-io:commons-io:2.6'
  compile 'uk.com.robust-it:cloning:1.9.12'
  compile 'org.eclipse.jetty:jetty-server:9.4.26.v20200117'
  compile 'org.eclipse.jetty:jetty-servlet:9.4.26.v20200117'
  compile 'org.eclipse.jetty:jetty-rewrite:9.4.26.v20200117'
  compile 'org.eclipse.jetty.websocket:websocket-server:9.4.26.v20200117'
  compile 'com.google.code.gson:gson:2.8.5'
  compile 'com.fazecast:jSerialComm:2.5.1'
  testCompile 'junit:junit:4.12'
  testCompile 'net.jodah:concurrentunit:0.4.6'
}

compileJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-options"
}

compileTestJava {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-options"
}

compileGroovy {
  options.compilerArgs << "-Xlint:all"
  options.compilerArgs << "-Xlint:-options"
}

test {
  systemProperties project.properties.subMap(["manualJSTest"])
  systemProperties project.properties.subMap(["manualPyTest"])
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
  manifest {
    attributes 'Build-Owner': System.getenv().USER, 'Build-Timestamp': new Date().format('d-MM-yyyy_HH:mm:ss'), 'Build-Version': "${project.version}/${commit}"
  }
}

test {
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }
}

task jars(dependsOn: jar, type: Copy) {
  into "$buildDir/libs"
  from configurations.runtimeClasspath
}

jars.outputs.upToDateWhen { false }

javadoc.doLast {
  mkdir 'docs/javadoc'
  copy {
    from javadoc.destinationDir
    into 'docs/javadoc'
  }
}

task buildjs { 
  doLast {
    if(npmExists){
      exec {
        workingDir 'gateways/js'
        commandLine 'npm', isCI ? 'ci' : "install"
        errorOutput = new ByteArrayOutputStream()
        standardOutput = new ByteArrayOutputStream()
      }
      exec {
        workingDir 'gateways/js'
        commandLine 'npm', 'run', 'build'
      }
    }else{
      project.logger.lifecycle('npm not found. Using cached fjage.js build')
    }
  }
}

processResources.dependsOn("buildjs")

task jsdoc(type: Exec){
  workingDir 'gateways/js'
  executable 'npm'
  args = ['run', 'docs']
}

task updatexterm {
  doLast {
    exec {
      workingDir '.'
      commandLine 'npm', 'install', 'xterm@4.13.0', 'xterm-addon-attach@0.6.0', 'xterm-addon-fit@0.5.0', 'xterm-addon-web-links@0.4.0'
    }
    copy {
      from (['node_modules/xterm-addon-web-links/lib', 'node_modules/xterm-addon-attach/lib', 'node_modules/xterm-addon-fit/lib', 'node_modules/xterm/lib']) { 
        include '*.js'
      }
      from ('node_modules/xterm/css'){
        include 'xterm.css'
      }
      into 'src/main/resources/org/arl/fjage/web/shell'
    }
    delete "node_modules", "package.json", "package-lock.json"
  }
}

////// tasks for MavenCentral deployment

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

signing {
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment {
        MavenDeployment deployment -> signing.signPom(deployment)
      }
      if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
      }
      pom.project {
        name archivesBaseName
        packaging 'jar'
        description 'Framework for Java and Groovy Agents'
        url 'http://github.com/org-arl/fjage'
        scm {
          url 'http://github.com/org-arl/fjage'
          connection 'scm:git:git://github.com/org-arl/fjage.git'
          developerConnection 'scm:git:git@github.com:org-arl/fjage.git'
        }
        licenses {
          license {
            name '3-clause BSD License'
            url 'http://github.com/org-arl/fjage/blob/master/LICENSE.txt'
            distribution 'repo'
          }
        }
        developers {
          developer {
            id 'mchitre'
            name 'Mandar Chitre'
          }
        }
      }
    }
  }
}
